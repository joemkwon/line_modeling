using PDDL, PlanningDomains
using SymbolicPlanners

# Register array theory for gridworld domains
PDDL.Arrays.register!()

doors_keys_gems = load_domain(:doors_keys_gems)
dkg_problem = load_problem(:doors_keys_gems, "problem-1")
dkg_state = initstate(doors_keys_gems, dkg_problem)
dkg_spec = Specification(dkg_problem)

domain = doors_keys_gems
state = dkg_state

actions = available(domain, state)
state = execute(domain, state, pddl"(down)")

c_domain, c_state = compiled(domain, state)

"Custom relaxed distance heuristic to goal objects."
struct GemHeuristic <: Heuristic end

function SymbolicPlanners.compute(heuristic::GemHeuristic,
                                  domain::Domain, state::State, spec::Specification)
    goals = SymbolicPlanners.get_goal_terms(spec)
    goal_objs = [g.args[1] for g in goals if g.name == :has]
    locs = [(state[Compound(:xloc, Term[o])], state[Compound(:yloc, Term[o])])
            for o in goal_objs]
    pos = (state[pddl"xpos"], state[pddl"ypos"])
    dists = [sum(abs.(pos .- l)) for l in locs]
    min_dist = length(dists) > 0 ? minimum(dists) : 0
    return min_dist + GoalCountHeuristic()(domain, state, spec)
end

planner = AStarPlanner(GoalCountHeuristic())
planner = AStarPlanner(GemHeuristic())

heuristic = GoalCountHeuristic()
planner = RTDP(heuristic=heuristic, rollout_noise=2.0, n_rollouts=50)
sol = planner(domain, state, dkg_spec)

simulator = StateActionRecorder(100)
actions, trajectory = simulator(sol, domain, state, dkg_spec)





