GenericState(Set(Compound[well(well8), agent(agent3), well(well4), well(well7), agent(agent7), tank(tank6), agent(agent5), well(well2), well(well9), agent(agent6), well(well3), agent(agent8), agent(agent1), agent(agent4), well(well6), tank(tank5), well(well1), well(well10), tank(tank3), well(well5), tank(tank4), tank(tank2), agent(agent2), tank(tank1)]), Set(Term[not(has-water2(agent8)), not(has-water1(agent5)), not(has-water1(agent4)), not(has-water1(agent2)), not(has-water2(agent3)), not(has-water3(agent2)), not(has-filled(agent3)), not(has-water3(agent5)), not(has-filled(agent4)), not(has-water1(agent7)), not(has-water1(agent8)), not(has-water2(agent1)), not(has-water3(agent7)), not(has-filled(agent6)), not(has-filled(agent1)), not(has-filled(agent7)), not(has-water3(agent1)), not(has-filled(agent2)), not(has-water1(agent6)), not(has-water3(agent4)), not(has-water3(agent3)), not(has-water2(agent4)), not(has-filled(agent8)), not(has-water1(agent1)), not(has-water2(agent7)), not(has-water3(agent8)), not(has-water2(agent2)), not(has-water1(agent3)), not(has-filled(agent5)), not(has-water2(agent6)), not(has-water3(agent6)), not(has-water2(agent5))]), Dict{Symbol, Any}(:walls => Bool[1 0 0 0 0 0 0 0 0 0 0 1 0 1; 0 1 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 1], :xloc => Dict{Any, Any}((:agent4,) => 9, (:well3,) => 14, (:agent3,) => 10, (:tank3,) => 1, (:agent7,) => 6, (:tank4,) => 1, (:well8,) => 14, (:tank6,) => 1, (:well2,) => 14, (:agent2,) => 11, (:tank2,) => 1, (:well6,) => 14, (:agent1,) => 12, (:agent5,) => 8, (:well10,) => 14, (:tank1,) => 1, (:agent6,) => 7, (:well5,) => 14, (:well7,) => 14, (:well9,) => 14, (:well1,) => 14, (:well4,) => 14, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 5, (:well3,) => 5, (:agent3,) => 5, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:well8,) => 10, (:tank6,) => 10, (:well2,) => 4, (:agent2,) => 5, (:tank2,) => 6, (:well6,) => 8, (:agent1,) => 5, (:agent5,) => 5, (:well10,) => 12, (:tank1,) => 5, (:agent6,) => 5, (:well5,) => 7, (:well7,) => 9, (:well9,) => 11, (:well1,) => 3, (:well4,) => 6, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[well(well8), agent(agent3), well(well4), well(well7), agent(agent7), tank(tank6), agent(agent5), well(well2), well(well9), agent(agent6), well(well3), agent(agent8), agent(agent1), agent(agent4), well(well6), tank(tank5), well(well1), well(well10), tank(tank3), well(well5), tank(tank4), tank(tank2), agent(agent2), tank(tank1)]), Set(Term[not(has-water2(agent8)), not(has-water1(agent5)), not(has-water1(agent4)), not(has-water1(agent2)), not(has-water2(agent3)), not(has-water3(agent2)), not(has-filled(agent3)), not(has-water3(agent5)), not(has-filled(agent4)), not(has-water1(agent7)), not(has-water1(agent8)), not(has-water2(agent1)), not(has-water3(agent7)), not(has-filled(agent6)), not(has-filled(agent1)), not(has-filled(agent7)), not(has-water3(agent1)), not(has-filled(agent2)), not(has-water1(agent6)), not(has-water3(agent4)), not(has-water3(agent3)), not(has-water2(agent4)), not(has-filled(agent8)), not(has-water1(agent1)), not(has-water2(agent7)), not(has-water3(agent8)), not(has-water2(agent2)), not(has-water1(agent3)), not(has-filled(agent5)), not(has-water2(agent6)), not(has-water3(agent6)), not(has-water2(agent5))]), Dict{Symbol, Any}(:walls => Bool[1 0 0 0 0 0 0 0 0 0 0 1 0 1; 0 1 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 1], :xloc => Dict{Any, Any}((:agent4,) => 9, (:well3,) => 14, (:agent3,) => 10, (:tank3,) => 1, (:agent7,) => 6, (:tank4,) => 1, (:well8,) => 14, (:tank6,) => 1, (:well2,) => 14, (:agent2,) => 11, (:tank2,) => 1, (:well6,) => 14, (:agent1,) => 12, (:agent5,) => 8, (:well10,) => 14, (:tank1,) => 1, (:agent6,) => 7, (:well5,) => 14, (:well7,) => 14, (:well9,) => 14, (:well1,) => 14, (:well4,) => 14, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 5, (:well3,) => 5, (:agent3,) => 5, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:well8,) => 10, (:tank6,) => 10, (:well2,) => 4, (:agent2,) => 5, (:tank2,) => 6, (:well6,) => 8, (:agent1,) => 5, (:agent5,) => 5, (:well10,) => 12, (:tank1,) => 5, (:agent6,) => 5, (:well5,) => 7, (:well7,) => 9, (:well9,) => 11, (:well1,) => 3, (:well4,) => 6, (:agent8,) => 5, (:tank5,) => 9)))