GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set{Term}(), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 4, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 8, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 10, (:agent5,) => 10, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 7, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set{Term}(), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 3, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 8, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 10, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 6, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set{Term}(), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 7, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 10, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set{Term}(), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 3, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 7, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 10, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set{Term}(), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 3, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 6, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 7, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 9, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 11, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set{Term}(), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 7, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 12, (:tank3,) => 7, (:agent7,) => 8, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 11, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water1(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 7, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 9, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 12, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water2(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 1, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 7, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 9, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 12, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 1, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 7, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 8, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 11, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent8), has-water1(agent1)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 1, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 6, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 8, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 12, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water2(agent1), has-water3(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 1, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 7, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 12, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-water3(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 6, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 1, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 14, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 7, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 12, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-water3(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 6, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 1, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 14, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 6, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 13, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-water3(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 6, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 1, (:agent6,) => 5, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 14, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 12, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 5, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 6, (:tank2,) => 1, (:agent1,) => 8, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 14, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 10, (:agent5,) => 12, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 6, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 6, (:tank2,) => 1, (:agent1,) => 7, (:agent5,) => 3, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 14, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 10, (:agent5,) => 12, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 7, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 6, (:agent5,) => 4, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 14, (:agent3,) => 12, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 10, (:agent5,) => 12, (:agent6,) => 11, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 6, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-water1(agent7), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 7, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 5, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 11, (:tank2,) => 6, (:agent1,) => 10, (:agent5,) => 12, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 7, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent1), has-filled(agent8), has-water2(agent7)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 7, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 4, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 11, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 10, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 12, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 6, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent7), has-water3(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 7, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 4, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 9, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 12, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 6, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent7), has-water3(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 6, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 4, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 8, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 11, (:agent6,) => 11, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 7, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent7), has-water3(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 5, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 4, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 7, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 11, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 7, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water1(agent2), has-water3(agent7), has-filled(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 4, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 7, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 10, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 7, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water2(agent2), has-water3(agent7), has-filled(agent1), has-filled(agent8)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 4, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 13, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 7, (:tank2,) => 6, (:agent1,) => 9, (:agent5,) => 11, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 6, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water3(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 8, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 5, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 7, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 11, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 6, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 6, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 5, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 7, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 11, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 6, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 7, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 4, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 6, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 11, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 5, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 7, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 7, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 4, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 10, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 6, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 7, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 9, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 10, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 5, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 10, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 5, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 8, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 11, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 5, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 10, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-filled(agent8), has-water3(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 8, (:agent5,) => 9, (:agent6,) => 8, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-water1(agent4), has-filled(agent1), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 8, (:agent6,) => 7, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-water2(agent4), has-filled(agent7), has-filled(agent1), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 7, (:agent6,) => 6, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water1(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 3, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 4, (:tank2,) => 6, (:agent1,) => 6, (:agent5,) => 7, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent4), has-filled(agent8), has-water2(agent5), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 3, (:tank3,) => 1, (:agent7,) => 5, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 7, (:agent6,) => 6, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 6, (:agent5,) => 7, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 3, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 8, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 3, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 8, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 4, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 9, (:agent6,) => 6, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 8, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 6, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 7, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 1, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 6, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 6, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 2, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 6, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 5, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 5, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 6, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 4, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 4, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 4, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 9, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 6, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 8, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 3, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 6, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 4, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent7), has-filled(agent1), has-water3(agent5), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 7, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 2, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 2, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 6, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 6, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 6, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 2, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 6, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 10, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 5, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 2, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 11, (:agent6,) => 6, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 4, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 2, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 12, (:agent6,) => 7, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 1, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 3, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 12, (:agent6,) => 8, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-water3(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 6, (:agent5,) => 3, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 5, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 13, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 5, (:agent5,) => 2, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 3, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 4, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 13, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 4, (:agent5,) => 2, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 9, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 13, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 4, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 14, (:agent6,) => 10, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 4, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 6, (:agent5,) => 13, (:agent6,) => 9, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 13, (:agent6,) => 8, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 13, (:agent6,) => 7, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 5, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 6, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 7, (:agent5,) => 14, (:agent6,) => 6, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 5, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 1, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 6, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 6, (:agent5,) => 14, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 5, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 1, (:agent6,) => 5, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 6, (:agent5,) => 13, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 5, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 1, (:agent6,) => 6, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 5, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 6, (:agent5,) => 13, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-water1(agent3), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 5, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 1, (:agent6,) => 7, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 6, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 14, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-water1(agent6), has-filled(agent7), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-water2(agent3), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 1, (:agent6,) => 7, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 6, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 10, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 5, (:agent5,) => 14, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-water2(agent6), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 2, (:agent6,) => 7, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 7, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 7, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 1, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 14, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-water3(agent6), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 4, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 1, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 1, (:agent5,) => 2, (:agent6,) => 7, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 7, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 8, (:tank3,) => 7, (:agent7,) => 1, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 1, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 13, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-water3(agent6), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 1, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 1, (:agent5,) => 2, (:agent6,) => 6, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 9, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 1, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 12, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-water3(agent6), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 8, (:tank3,) => 1, (:agent7,) => 1, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 1, (:agent5,) => 2, (:agent6,) => 5, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 1, (:tank2,) => 6, (:agent1,) => 3, (:agent5,) => 13, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-water3(agent6), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 2, (:agent3,) => 7, (:tank3,) => 1, (:agent7,) => 1, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 1, (:agent5,) => 2, (:agent6,) => 4, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 13, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 1, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-water3(agent6), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 6, (:tank3,) => 1, (:agent7,) => 1, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 3, (:tank2,) => 1, (:agent1,) => 1, (:agent5,) => 3, (:agent6,) => 3, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 13, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-water3(agent6), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 5, (:tank3,) => 1, (:agent7,) => 1, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 3, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 13, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent6), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 4, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 2, (:agent5,) => 3, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 9, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 11, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 14, (:agent6,) => 5, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent6), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 3, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 3, (:agent6,) => 2, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 3, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 13, (:agent6,) => 4, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent5), has-filled(agent6), has-filled(agent7), has-water3(agent3), has-filled(agent1), has-filled(agent4), has-filled(agent8), has-filled(agent2)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 3, (:agent3,) => 2, (:tank3,) => 1, (:agent7,) => 2, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 3, (:agent6,) => 1, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 2, (:tank2,) => 6, (:agent1,) => 4, (:agent5,) => 14, (:agent6,) => 4, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 2, (:tank5,) => 9)))GenericState(Set(Compound[agent(agent1), agent(agent4), tank(tank5), agent(agent3), well(well1), agent(agent7), tank(tank6), agent(agent5), tank(tank3), well(well2), tank(tank2), tank(tank4), agent(agent2), agent(agent6), tank(tank1), agent(agent8)]), Set(Term[has-filled(agent2), has-filled(agent7), has-filled(agent4), has-filled(agent6), has-filled(agent3), has-filled(agent1), has-filled(agent8), has-filled(agent5)]), Dict{Symbol, Any}(:walls => Bool[0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 1 1 1 1 1 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 1 0 0 0 0 0; 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 0 0 1 0 0 0 0 0; 0 0 0 0 0 1 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 1 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0], :xloc => Dict{Any, Any}((:agent4,) => 4, (:agent3,) => 2, (:tank3,) => 1, (:agent7,) => 3, (:tank4,) => 1, (:tank6,) => 1, (:well2,) => 8, (:agent2,) => 4, (:tank2,) => 1, (:agent1,) => 3, (:agent5,) => 3, (:agent6,) => 1, (:tank1,) => 1, (:well1,) => 8, (:agent8,) => 8, (:tank5,) => 1), :yloc => Dict{Any, Any}((:agent4,) => 12, (:agent3,) => 10, (:tank3,) => 7, (:agent7,) => 2, (:tank4,) => 8, (:tank6,) => 10, (:well2,) => 6, (:agent2,) => 3, (:tank2,) => 6, (:agent1,) => 3, (:agent5,) => 13, (:agent6,) => 4, (:tank1,) => 5, (:well1,) => 5, (:agent8,) => 3, (:tank5,) => 9)))